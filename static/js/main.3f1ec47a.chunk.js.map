{"version":3,"sources":["components/Checkbox/Checkbox.tsx","components/Box/Box.tsx","components/Wrapper/Wrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Checkbox","id","checked","onChange","name","className","type","htmlFor","CloseBtn","onClick","Box","key","children","Wrapper","currencies","select","App","useState","curr","setCurr","filtered","filter","i","map","e","ch","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f1ec47a.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport './Checkbox.css';\r\n\r\ntype Props = {\r\n  id: string;\r\n  checked: boolean;\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  name: string;\r\n};\r\n\r\nconst Checkbox: FC<Props> = ({ id, checked, onChange, name }) => {\r\n  return (\r\n    <div className=\"checkbox\">\r\n      <input\r\n        id={id}\r\n        type=\"checkbox\"\r\n        className=\"checkbox__input\"\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      <div className=\"checkbox__checkmark\">\r\n        <span className=\"checkbox__checkmark-image\">x</span>\r\n      </div>\r\n      <label className='label' htmlFor={id}>{name}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { FC } from 'react';\r\nimport './Box.css';\r\n\r\ntype BoxType = {\r\n  className: string;\r\n  key: number;\r\n};\r\n\r\ntype BtnType = {\r\n  onClick: () => void;\r\n};\r\n\r\nconst Box: FC<BoxType> = ({ className, key, children }) => {\r\n  return (\r\n    <div className={`box ${className}`} key={key}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CloseBtn :FC<BtnType> = ({ onClick }) => {\r\n  return (\r\n    <button\r\n      className=\"button-close\"\r\n      type=\"button\"\r\n      onClick={onClick}\r\n    >\r\n      x\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Box;\r\n","import React, { FC } from 'react';\r\nimport './Wrapper.css';\r\n\r\ntype Props = {\r\n  className: string;\r\n};\r\n\r\nconst Wrapper: FC<Props> = ({ className, children }) => {\r\n  return (\r\n    <div className={className}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport Checkbox from './components/Checkbox/Checkbox';\nimport Box, { CloseBtn } from './components/Box/Box';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport './App.css';\nimport 'flexboxgrid';\n\nconst currencies = [\n  {\n    id: 1,\n    name: 'EUR',\n    select: false,\n  },\n  {\n    id: 2,\n    name: 'PLN',\n    select: false,\n  },\n  {\n    id: 3,\n    name: 'GEL',\n    select: false,\n  },\n  {\n    id: 4,\n    name: 'DKK',\n    select: false,\n  },\n  {\n    id: 5,\n    name: 'CZK',\n    select: false,\n  },\n  {\n    id: 6,\n    name: 'GBP',\n    select: false,\n  },\n  {\n    id: 7,\n    name: 'SEK',\n    select: false,\n  },\n  {\n    id: 8,\n    name: 'USD',\n    select: false,\n  },\n  {\n    id: 9,\n    name: 'RUB',\n    select: false,\n  },\n];\n\nconst App = () => {\n  const [curr, setCurr] = useState(currencies);\n\n  const filtered = curr.filter((i) => i.select);\n\n  return (\n    <section className='section'>\n      <div className=\"container container-fluid\">\n        <div className=\"row center-xs\">\n          <div className=\"col-xs-12\">\n            <Wrapper className=\"wrapper\">\n              <Wrapper className=\"boxes boxes--upper\">\n                {filtered.map(({ id, name }) => {\n                  return (\n                    <Box key={id} className=\"box--upper\">\n                      <div>{name}</div>\n                      <CloseBtn\n                        onClick={() => {\n                          setCurr(\n                            curr.map((i) => {\n                              if (id === i.id) {\n                                i.select = false;\n                              }\n                              return i;\n                            })\n                          );\n                        }}\n                      />\n                    </Box>\n                  );\n                })}\n              </Wrapper>\n              <Wrapper className=\"boxes\">\n                {curr.map(({ id, name, select }) => {\n                  return (\n                    <Box className={`${select && 'active'}`} key={id}>\n                      <Checkbox\n                        id={`${id}`}\n                        checked={select}\n                        name={name}\n                        onChange={(e) => { // @ts-ignore\n                          const ch = e.target.checked;\n                          setCurr(\n                            curr.map((i) => {\n                              if (id === i.id) {\n                                i.select = ch;\n                              }\n                              return i;\n                            })\n                          );\n                        }}\n                      />\n                    </Box>\n                  );\n                })}\n              </Wrapper>\n            </Wrapper>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}